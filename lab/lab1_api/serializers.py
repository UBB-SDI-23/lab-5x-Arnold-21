from rest_framework import serializers
from .models import Stadium, Club, Competition, MatchesPlayed, UserDetail
import re
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from django.contrib.auth import get_user_model

# `User = get_user_model()` is importing the user model defined in the Django project and assigning it
# to the variable `User`. This allows the user model to be used in the serializers.
User = get_user_model()

#Token serializer
# The class `MyTokenObtainPairSerializer` extends `TokenObtainPairSerializer` and adds custom claims
# to the token.
class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    @classmethod
    def get_token(cls, user):
        """
        This function adds user ID and role to a token generated by a superclass method.
        
        :param cls: The class object that the method is called on (i.e. the class itself)
        :param user: The "user" parameter is an instance of a user model object. It represents a user in
        the system and contains information about the user such as their username, email, password, and
        role. The "user" object is passed as an argument to the "get_token" method, which generates a
        :return: The method `get_token` is returning a dictionary object `token` with two key-value
        pairs: `user_id` and `role`. The `user_id` key is associated with the `id` attribute of the
        `user` object passed as an argument to the method, and the `role` key is associated with the
        `role` attribute of the same `user` object.
        """
        token = super().get_token(user)

        token['user_id'] = user.id
        token['role'] = user.role

        return token
    
# This is a serializer class for the User model with fields for id, username, and role.
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ("id", "username", "role")
    
#UserDetail Serializer
# This is a serializer class in Python that includes methods to get the number of clubs, stadiums,
# competitions, and matches associated with a user, and also includes validation for user details.
class UserDetailSerializer(serializers.ModelSerializer):
    NumberOfClubs = serializers.SerializerMethodField("getNumberOfClubs")
    NumberOfStadiums = serializers.SerializerMethodField("getNumberOfStadium")
    NumberOfCompetitions = serializers.SerializerMethodField("getNumberOfCompetitions")
    NumberOfMatches = serializers.SerializerMethodField("getNumberOfMatches")
    userName = UserSerializer(read_only=True)

    class Meta:
        model = UserDetail
        fields = "__all__"

    def validate(self, data):
        """
        This function validates user input for bio, location, and birthday fields, raising a validation
        error if the input does not meet the specified criteria.
        
        :param data: a dictionary containing the data to be validated, including "bio", "location", and
        "birthday" fields
        :return: the validated data dictionary.
        """
        if not re.search("^[a-zA-Z0-9 ]*$",data["bio"]) and data["bio"] is not None:
            raise serializers.ValidationError({"error": "Bio can only contain numbers and letters"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["location"]) and data["location"] is not None:
            raise serializers.ValidationError({"error": "Location can only contain numbers and letters"})
        if not re.search("^[0-9]{4}-[0-9]{2}-[0-9]{2}$",data["birthday"]) and data["birthday"] is not None:
            raise serializers.ValidationError({"error": "Birthday has to have the following format: yyyy-mm-dd"})
        return data
    
    #Code, which will get the accumulated fields of the serializer
    def getNumberOfClubs(self, userDetail):
        return userDetail.userName.club.count()
    def getNumberOfStadium(self, userDetail):
        return userDetail.userName.stadium.count()
    def getNumberOfCompetitions(self, userDetail):
        return userDetail.userName.competition.count()
    def getNumberOfMatches(self, userDetail):
        return userDetail.userName.match.count()

# This is a serializer class for the Stadium model in Python, which includes validation for the
# capacity, name, city, and description fields.
class StadiumSerializer(serializers.ModelSerializer):
    NumberOfClubs = serializers.IntegerField(read_only=True)
    user = UserSerializer(read_only=True)

    class Meta:
        model = Stadium
        fields = "__all__"
        
    def validate(self, data):
        if type(data["capacity"]) is not int or data["capacity"] < 0:
            raise serializers.ValidationError({"error": "Stadium capacity must be a positive integer"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["name"]):
            raise serializers.ValidationError({"error": "Name can only contain numbers and letters"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["city"]):
            raise serializers.ValidationError({"error": "City can only contain numbers and letters"})
        if not re.search("^[a-zA-Z0-9 .,!?;:]*$",data["description"]):
            raise serializers.ValidationError({"error": "Description can only contain numbers and letters"})
        return data
    
# This is a serializer class in Python that validates the data for a stadium model and raises
# validation errors if the data is not in the correct format.
#For Put, Post operations
class simpleStadiumSerializer(serializers.ModelSerializer):
    #No function to get the accumulated field, for the sake of it being optional
    NumberOfClubs = serializers.IntegerField(read_only=True)

    class Meta:
        model = Stadium
        fields = "__all__"
        
    def validate(self, data):
        if type(data["capacity"]) is not int or data["capacity"] < 0:
            raise serializers.ValidationError({"error": "Stadium capacity must be a positive integer"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["name"]):
            raise serializers.ValidationError({"error": "Name can only contain numbers and letters"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["city"]):
            raise serializers.ValidationError({"error": "City can only contain numbers and letters"})
        if not re.search("^[a-zA-Z0-9 .,!?;:]*$",data["description"]):
            raise serializers.ValidationError({"error": "Description can only contain numbers and letters"})
        return data


# This is a serializer class in Python that validates the data for a Club model and ensures that the
# name only contains letters and numbers, the annual budget is a positive integer, and the number of
# staff is a positive integer.
#For Put, Post operations
class simpleClubSerializer(serializers.ModelSerializer):
    #No function to get the accumulated field, for the sake of it being optional
    stadiumCapacity = serializers.FloatField(read_only=True)

    class Meta:
        model = Club
        fields = "__all__"

    def validate(self, data):
        if not re.search("^[a-zA-Z0-9 ]*$",data["name"]):
            raise serializers.ValidationError({"error": "Name can only contain numbers and letters"})
        if type(data["annualBudget"]) is not int or data["annualBudget"] < 0:
            raise serializers.ValidationError({"error": "Annual Budget must be a positive integer"})
        if type(data["numberOfStadd"]) is not int or data["numberOfStadd"] < 0:
            raise serializers.ValidationError({"error": "Number of Staff must be a positive integer"})
        return data


# This is a serializer class for a simple competition model in Python, which validates the input data
# and includes a read-only field for average budget.
#For Put, Post operations
class simpleCompetitionSerializer(serializers.ModelSerializer):
    #No function to get the accumulated field, for the sake of it being optional
    avgBudget = serializers.FloatField(read_only=True)

    class Meta:
        model = Competition
        fields = "__all__"

    def validate(self, data):
        if type(data["numberOfTeams"]) is not int or data["numberOfTeams"] < 0:
            raise serializers.ValidationError({"error": "Number of Teams must be a positive integer"})
        if type(data["prizeMoney"]) is not int or data["prizeMoney"] < 0:
            raise serializers.ValidationError({"error": "Prize Money must be a positive integer"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["name"]):
            raise serializers.ValidationError({"error": "Name can only contain numbers and letters"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["competitionType"]):
            raise serializers.ValidationError({"error": "Competition Type can only contain numbers and letters"})
        return data


# This is a serializer class for the Competition model in Python, which includes validation for
# certain fields and a method to retrieve related Club objects.
class competitionSerializer(serializers.ModelSerializer):
    #No function to get the accumulated field, for the sake of it being optional
    clubs = serializers.SerializerMethodField()
    RealNumberOfTeams = serializers.IntegerField(read_only=True)
    user = UserSerializer(read_only=True)

    def get_clubs(self, obj):
        query = obj.league.all()[:30]
        serializer = clubSerializer(query, many=True)
        return serializer.data

    class Meta:
        model = Competition
        fields = "__all__"

    def validate(self, data):
        if type(data["numberOfTeams"]) is not int or data["numberOfTeams"] < 0:
            raise serializers.ValidationError({"error": "Number of Teams must be a positive integer"})
        if type(data["prizeMoney"]) is not int or data["prizeMoney"] < 0:
            raise serializers.ValidationError({"error": "Prize Money must be a positive integer"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["name"]):
            raise serializers.ValidationError({"error": "Name can only contain numbers and letters"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["competitionType"]):
            raise serializers.ValidationError({"error": "Competition Type can only contain numbers and letters"})
        return data

# This is a serializer class for the Club model in Python, which validates the input data and includes
# related models such as league, stadium, user, and matches played.
class clubSerializer(serializers.ModelSerializer):
    #No function to get the accumulated field, for the sake of it being optional
    league = simpleCompetitionSerializer(read_only=True)
    stadium = StadiumSerializer(read_only=True)
    matchesPlayed = serializers.IntegerField(read_only=True)
    user = UserSerializer(read_only=True)

    class Meta:
        model = Club
        fields = "__all__"

    def validate(self, data):
        if not re.search("^[a-zA-Z0-9 ]*$",data["name"]):
            raise serializers.ValidationError({"error": "Name can only contain numbers and letters"})
        if type(data["annualBudget"]) is not int or data["annualBudget"] < 0:
            raise serializers.ValidationError({"error": "Annual Budget must be a positive integer"})
        if type(data["numberOfStadd"]) is not int or data["numberOfStadd"] < 0:
            raise serializers.ValidationError({"error": "Number of Staff must be a positive integer"})
        return data


# This is a serializer class in Python that validates data for matches played, including checking that
# the clubs are not playing against themselves, the score is in the correct format, and the round of
# play only contains letters and numbers.
class matchesPlayedSerializer(serializers.ModelSerializer):
    #No function to get the accumulated field, for the sake of it being optional
    club1 = simpleClubSerializer()
    club2 = simpleClubSerializer()
    competition = simpleCompetitionSerializer()
    stadium = StadiumSerializer()
    avgleaguebudget = serializers.FloatField(read_only=True)
    user = UserSerializer(read_only=True)

    class Meta:
        model = MatchesPlayed
        fields = "__all__"

    def validate(self, data):
        if data["club1"] == data["club2"]:
            raise serializers.ValidationError({"error": "The club cannot play against itself"})
        if not re.search("^[0-9]{1,2}-[0-9]{1,2}$", data["score"]):
            raise serializers.ValidationError({"error": "Incorrect/Impossible score"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["roundOfPlay"]):
            raise serializers.ValidationError({"error": "Round Of Play can only contain numbers and letters"})
        return data


# This is a serializer class in Python that validates data for a model called MatchesPlayed, checking
# for errors such as clubs playing against themselves, incorrect/impossible scores, and invalid
# characters in the round of play field.
#For Put, Post operations
class simpleMatchesPlayedSerializer(serializers.ModelSerializer):
    class Meta:
        model = MatchesPlayed
        fields = "__all__"

    def validate(self, data):
        if data["club1"] == data["club2"]:
            raise serializers.ValidationError({"error": "The club cannot play against itself"})
        if not re.search("^[0-9]{1,2}-[0-9]{1,2}$", data["score"]):
            raise serializers.ValidationError({"error": "Incorrect/Impossible score"})
        if not re.search("^[a-zA-Z0-9 ]*$",data["roundOfPlay"]):
            raise serializers.ValidationError({"error": "Round Of Play can only contain numbers and letters"})
        return data